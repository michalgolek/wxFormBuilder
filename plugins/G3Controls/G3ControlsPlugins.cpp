//#include "stdafx.h"

#include <component.h>
#include <plugin.h>
#include <xrcconv.h>
#include <ticpp.h>

#include <wx/clrpicker.h>
#include <wx/fontpicker.h>

#include <wx/propgrid/propgrid.h>
#include <wx/propgrid/advprops.h>
#include <wx/propgrid/manager.h>

#include <wx/infobar.h>

#include "G3wxControls.h"

#include "ImageBrowser.xpm"

/**
Event handler for events generated by controls in this plugin
*/
class ComponentEvtHandler : public wxEvtHandler
{
private:
	wxWindow* m_window;
	IManager* m_manager;

public:
	ComponentEvtHandler( wxWindow* win, IManager* manager )
		:
	m_window( win ),
		m_manager( manager )
	{
	}

protected:
	void OnColourPickerColourChanged( wxColourPickerEvent& event );
	void OnFontPickerFontChanged( wxFontPickerEvent& event );

	DECLARE_EVENT_TABLE()
};

BEGIN_EVENT_TABLE( ComponentEvtHandler, wxEvtHandler )

	EVT_COLOURPICKER_CHANGED( -1, ComponentEvtHandler::OnColourPickerColourChanged )
	EVT_FONTPICKER_CHANGED( -1, ComponentEvtHandler::OnFontPickerFontChanged )
	
END_EVENT_TABLE()

//////////////////////////////////////////////////////////////////////////

class G3ImageBrowserComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3ImageBrowser* imageBrowser = new G3ImageBrowser((wxWindow*)parent,-1,
			/*obj->GetPropertyAsString(_("label")),*/
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

		if ( !obj->IsNull( _("imageSize") ) )
		{
			imageBrowser->SetImageSize( obj->GetPropertyAsSize( _("imageSize") ) );
		}

		if ( !obj->IsNull( _("itemSpace") ) )
		{
			imageBrowser->SetItemSpace( obj->GetPropertyAsSize( _("itemSpace") ) );
		}

		if ( !obj->IsNull( _("labelFont") ) )
		{
			imageBrowser->SetLabelFont( obj->GetPropertyAsFont( _("labelFont") ) );
		}

		if ( !obj->IsNull( _("labelColour") ) )
		{
			imageBrowser->SetLabelColour( obj->GetPropertyAsColour( _("labelColour") ) );
		}

		if ( !obj->IsNull( _("selectedLabelColour") ) )
		{
			imageBrowser->SetSelectedLabelColour( obj->GetPropertyAsColour( _("selectedLabelColour") ) );
		}

		if ( !obj->IsNull( _("bgColor1") ) )
		{
			imageBrowser->SetBgGradientColour1( obj->GetPropertyAsColour( _("bgColor1") ) );
		}

		if ( !obj->IsNull( _("bgColor2") ) )
		{
			imageBrowser->SetBgGradientColour2( obj->GetPropertyAsColour( _("bgColor2") ) );
		}

		if ( !obj->IsNull( _("labelBgColor1") ) )
		{
			imageBrowser->SetLabelGradientColour1( obj->GetPropertyAsColour( _("labelBgColor1") ) );
		}

		if ( !obj->IsNull( _("labelBgColor2") ) )
		{
			imageBrowser->SetLabelGradientColour2( obj->GetPropertyAsColour( _("labelBgColor2") ) );
		}

		if ( !obj->IsNull( _("selFrameColor") ) )
		{
			imageBrowser->SetSelectedFrameColour( obj->GetPropertyAsColour( _("selFrameColor") ) );
		}

		if ( !obj->IsNull( _("selFrameWidth") ) )
		{
			imageBrowser->SetSelectedFrameWidth( obj->GetPropertyAsInteger( _("selFrameWidth") ) );
		}

		if ( !obj->IsNull( _("selectedLabelBackgroundColor") ) )
		{
			imageBrowser->SetSelectedLabelBgColour( obj->GetPropertyAsColour( _("selectedLabelBackgroundColor") ) );
		}
		
		if ( !obj->IsNull( _("viewMode") ) )
		{
			//imageBrowser->SetViewMode( obj->GetPropertyAsInteger( _("viewMode") ) );
			int viewMode=obj->GetPropertyAsInteger( _("viewMode") );
			imageBrowser->SetViewMode(viewMode);
		}

		imageBrowser->ClearAll();
				
		wxBitmap bmp(Pixmap, wxBITMAP_TYPE_XPM);
		wxImage image=bmp.ConvertToImage();
		for (int i=0;i<10;i++)
		{		
			G3ImageBrowserItem *item=new G3ImageBrowserItem(wxString::Format("item %i", i+1), &image, wxString::Format("2048x2048, DXT5\n16 bit, 3460KB\nIndex %i", i), _("Detail"));
			imageBrowser->AddItem(item);
		}

		return imageBrowser;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3ImageBrowser"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		//xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3ImageBrowser"));
		filter.AddWindowProperties();
		//filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

//////////////////////////////////////////////////////////////////////////
class G3ColorPickerPanelComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3ColorPickerPanel* colorPickerPanel = new G3ColorPickerPanel((wxWindow*)parent,-1,
			/*obj->GetPropertyAsString(_("label")),*/
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")));

		if ( !obj->IsNull( _("currentColour") ) )
		{
			colorPickerPanel->SetRGBA( obj->GetPropertyAsColour( _("currentColour") ) );
		}


		return colorPickerPanel;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3ColorPickerPanel"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		//xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3ColorPickerPanel"));
		filter.AddWindowProperties();
		//filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

//////////////////////////////////////////////////////////////////////////

class G3ColorPickerDialogComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3ColorPickerDialog* colorPickerDialog= new G3ColorPickerDialog((wxWindow*)parent,-1,
			obj->GetPropertyAsString(_("label")));//,
// 			obj->GetPropertyAsPoint(_("pos")),
// 			obj->GetPropertyAsSize(_("size")),
// 			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

		if ( !obj->IsNull( _("currentColour") ) )
		{
			colorPickerDialog->SetColour( obj->GetPropertyAsColour( _("currentColour") ) );
		}

		return colorPickerDialog;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3ColorPickerDialog"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3ColorPickerDialog"));
		filter.AddWindowProperties();
		filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

void ComponentEvtHandler::OnColourPickerColourChanged( wxColourPickerEvent& )
{
	wxColourPickerCtrl* window = wxDynamicCast( m_window, wxColourPickerCtrl );
	if ( window != NULL )
	{
		wxColour colour = window->GetColour();
		m_manager->ModifyProperty( window, _("colour"), wxString::Format(wxT("%d,%d,%d"),colour.Red(),colour.Green(),colour.Blue())  );
	}
}

void ComponentEvtHandler::OnFontPickerFontChanged( wxFontPickerEvent& )
{
	wxFontPickerCtrl* window = wxDynamicCast( m_window, wxFontPickerCtrl );
	if ( window != NULL )
	{
		wxFont font = window->GetSelectedFont();
		m_manager->ModifyProperty( window, _("value"), wxString::Format( wxT("%s,%d,%d,%d"), font.GetFaceName().c_str(), font.GetStyle(), font.GetWeight(), font.GetPointSize() ) );
	}
}

//////////////////////////////////////////////////////////////////////////

class G3CollapsiblePanelsToggleEvent2 : public wxEvtHandler
{
private:
	IManager* m_manager;
	wxPanel* m_panel;
	wxScrolledWindow *m_scrwin;
	wxObject *m_childPanel;

	void OnToggle( wxCommandEvent&  event)
	{
		wxToggleButton *toggleButton=(wxToggleButton *) event.GetEventObject();
		if(toggleButton)
		{
			if(event.IsChecked())
				m_panel->Show();
			else
				m_panel->Hide();

			m_scrwin->Layout();
			m_scrwin->GetParent()->Layout();

			m_manager->ModifyProperty( m_childPanel, wxT("closed"), event.IsChecked()?"0":"1");
		}	
	}

public:
	G3CollapsiblePanelsToggleEvent2(wxPanel *panel, wxScrolledWindow *scrollwin, wxObject *childPanel, IManager* manager ):
	  m_manager( manager ),
		  m_panel(panel),
		  m_scrwin(scrollwin),
		  m_childPanel(childPanel)
	  {

	  }
	  DECLARE_EVENT_TABLE()
};

BEGIN_EVENT_TABLE( G3CollapsiblePanelsToggleEvent2, wxEvtHandler )
	EVT_TOGGLEBUTTON(wxID_ANY, G3CollapsiblePanelsToggleEvent2::OnToggle)
END_EVENT_TABLE()

class G3CollapsiblePanelsComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3CollapsiblePanels* collapsiblePanel=new G3CollapsiblePanels((wxWindow *)parent,
			-1,
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));
			
		//collapsiblePanel->PushEventHandler( new ComponentEvtHandler( collapsiblePanel, GetManager() ) );

		if ( !obj->IsNull( _("labelFont") ) )
		{
			collapsiblePanel->SetLabelFont( obj->GetPropertyAsFont( _("labelFont") ) );
		}

		if ( !obj->IsNull( _("labelColour") ) )
		{
			collapsiblePanel->SetLabelColour( obj->GetPropertyAsColour( _("labelColour") ) );
		}

		if ( !obj->IsNull( _("frameColour") ) )
		{
			collapsiblePanel->SetFrameColour( obj->GetPropertyAsColour( _("frameColour") ) );
		}

		if ( !obj->IsNull( _("bgColor1") ) )
		{
			collapsiblePanel->SetBgColour1( obj->GetPropertyAsColour( _("bgColor1") ) );
		}

		if ( !obj->IsNull( _("bgColor2") ) )
		{
			collapsiblePanel->SetBgColour2( obj->GetPropertyAsColour( _("bgColor2") ) );
		}
		
		if ( obj->GetPropertyAsInteger( _("styleskin") ) )
				collapsiblePanel->SetStyle(obj->GetPropertyAsInteger( _("styleskin") ));

// 		if((collapsiblePanel->GetWindowStyle() & G3_CP_SIMPLE_BACKGROUND)  ||
// 			(collapsiblePanel->GetWindowStyle() & G3_CP_GRADIENTBACKGROUND))
		if(collapsiblePanel->GetStyle()==G3_CP_GRADIENTBACKGROUND)
		{
			if ( !obj->IsNull( _("bgGradientColor1") ) )
			{				
				collapsiblePanel->SetBgGradientColour1( obj->GetPropertyAsColour( _("bgGradientColor1") ) );
			}

			if ( !obj->IsNull( _("bgGradientColor2") ) )
			{				
				collapsiblePanel->SetBgGradientColour2( obj->GetPropertyAsColour( _("bgGradientColor2") ) );
			}
		}		

		return collapsiblePanel;
	}

// 	void Cleanup( wxObject* obj )
// 	{
// 		ComponentBase::Cleanup(obj);



		//Disconnect ?
// 	}

 	void OnCreated( wxObject* wxobject, wxWindow* wxparent )
 	{
 		G3CollapsiblePanels* collPanels = wxDynamicCast( wxobject, G3CollapsiblePanels );
 		if ( NULL == collPanels )
 		{
 			wxLogError( _("This should be a G3CollapsiblePanels") );
 			return;
 		}

 		size_t childCount = GetManager()->GetChildCount( wxobject );
 		
		for (int i=0;i<childCount;i++)
		{
			wxObject* paneChild = GetManager()->GetChild( wxobject, i );

			wxPanel* subwindow = wxDynamicCast( GetManager()->GetChild( paneChild, 0 ), wxPanel );

			wxToggleButton*button=collPanels->AddPage(subwindow, GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("label")), GetManager()->GetIObject(paneChild)->GetPropertyAsInteger( _("closed")));
			button->PushEventHandler(new G3CollapsiblePanelsToggleEvent2(subwindow, collPanels->GetScrolledWnd(), paneChild, GetManager()));
		}
		
		collPanels->Finalize();
 	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3CollapsiblePanels"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("G3CollapsiblePanels"));
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class G3CollapsiblePageComponent : public ComponentBase
{
public:
// 	wxObject* Create( IObject* /*obj*/, wxObject* /*parent*/ )
// 	{
// 		wxObject *obj=m_manager->NewNoObject(); /* Even components which are not visible must be unique in the map */
// 	
// 		return obj;
// 
	void OnCreated( wxObject* wxobject, wxWindow* wxparent )
	{
		//wxMessageBox(wxT("oncreate page"));
		//BookUtils::OnCreated< wxNotebook >( wxobject, wxparent, GetManager(), _("G3CollapsiblePageComponent") );
		//wxMessageBox();
	}

	void OnSelected( wxObject* wxobject )
	{
		//BookUtils::OnSelected< wxNotebook >( wxobject, GetManager() );
		//wxMessageBox(wxT("onselect page"));
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3CollapsiblePage"));
		xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		xrc.AddProperty(_("select"),_("selected"),XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("G3CollapsiblePage"));
		filter.AddWindowProperties();
		filter.AddProperty(_("selected"),_("select"),XRC_TYPE_BOOL);
		filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

//////////////////////////////////////////////////////////////////////////

class G3GroupBoxComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3GroupBox* groupBox=new G3GroupBox((wxWindow*)parent,
			obj->GetPropertyAsString(_("label")),
			obj->GetPropertyAsColour( _("edgeColor") ),
			obj->GetPropertyAsInteger( _("edgeWidth") ),
			obj->GetPropertyAsInteger( _("roundBorderSize") ),
			-1,
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

		return groupBox;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3GroupBox"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		//xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3GroupBox"));
		filter.AddWindowProperties();
		//filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};


class G3CustomFileSelectComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3CustomFileSelect* selectFilePanel=new G3CustomFileSelect((wxWindow*)parent,
			obj->GetPropertyAsInteger( _("dialogType")),
			obj->GetPropertyAsString( _("path") ),
			obj->GetPropertyAsString( _("fileSpecs") ),
			obj->GetPropertyAsInteger( _("subFolders") ) );

		if ( !obj->IsNull( _("selectedFile") ) )
			selectFilePanel->SelectFile(obj->GetPropertyAsString(_("selectedFile") ));

		return selectFilePanel;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3CustomFileSelect"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		//xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3CustomFileSelect"));
		filter.AddWindowProperties();
		//filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};
//////////////////////////////////////////////////////////////////////////
//
//class G3BitmapPanel:public wxCustomBackgroundWindow<wxPanel>
//{
//private:
//	bool m_bGradientMode;
//
//public:
//	G3BitmapPanel():
//	  m_bGradientMode(true)
//	{
//		//Init();
//	}
//
//	wxColour m_gradientColour1, m_gradientColour2;
//	wxDirection m_gradientDirection;
//
//	G3BitmapPanel(wxWindow *parent, wxBitmap &bitmap, wxWindowID id,
//		const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, 
//		long style=wxTAB_TRAVERSAL, const wxString &name=wxPanelNameStr):	
//	//wxPanel(parent, id),
//	//wxCustomBackgroundWindow<wxPanel>(),
//		m_bGradientMode(false)
//	
//	{
//		Create(parent, id, pos, size, style, name);		
//		
//		SetBackgroundBitmap(bitmap);
//
//		Layout();		
//	}
//
//	G3BitmapPanel(wxWindow *parent, wxColour gradientColour1, wxColour gradientColour2, wxDirection gradientDir, wxWindowID id,
//		const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, 
//		long style=wxTAB_TRAVERSAL, const wxString &name=wxPanelNameStr):	
//	//wxPanel(parent, id),
////	wxCustomBackgroundWindow<wxPanel>(),
//		m_gradientColour1(gradientColour1),
//		m_gradientColour2(gradientColour2),
//		m_gradientDirection(gradientDir),
//		m_bGradientMode(true)
//	{
//		Create(parent, id, pos, size, style, name);
//
//		Connect( wxEVT_SIZE, wxSizeEventHandler( G3BitmapPanel::OnSize), NULL, this );	
//	}
//	
//
//	~G3BitmapPanel()
//	{
//		Disconnect( wxEVT_SIZE, wxSizeEventHandler( G3BitmapPanel::OnSize), NULL, this );	
//	}
// 
//// 	bool Create(wxWindow *parent, wxWindowID id,		
//// 		const wxPoint& pos, const wxSize& size,
//// 		long style,
//// 		const wxString& name)
//// 	{
//// 		if (!wxPanel::Create(parent, id, pos, size, wxTAB_TRAVERSAL, name))
//// 			return false;
//// 
//// 		 return true;
//// 	}
//
// 	void OnSize(wxSizeEvent& event)
// 	{
// 		//wxRect rc=wxPanel::GetClientRect();
// 		wxRect rc=GetVirtualSize();
//  
// 		wxMemoryDC memDC;
// 		wxBitmap bitmap (rc.GetWidth(), rc.GetHeight());
//
// 		memDC.SelectObject(bitmap);
//
//  
//  
// 		memDC.GradientFillLinear(rc, m_gradientColour1, m_gradientColour2, m_gradientDirection);
// 		// 		memDC.SetPen(*wxBLACK_PEN);
//
// 		// 		memDC.SetBrush(*wxTRANSPARENT_BRUSH);
//
// 		// 		memDC.DrawRectangle(rc);
//
// 		memDC.SelectObject(wxNullBitmap);
//  
// 		SetBackgroundBitmap(bitmap);
// 
// 		Layout();
// 	}
//
//
//
////  	void OnSize(wxSizeEvent& event)
////  	{
////  		wxRect rc=wxPanel::GetClientRect();
////  	
////  		if(!m_bGradientMode)
////  		{
////  			wxBitmap bitmap (rc.GetWidth(), rc.GetHeight());
//
////  
//
////  			wxMemoryDC memDC( bitmap );
//
////  
////  			memDC.GradientFillLinear(rc, m_gradientColour1, m_gradientColour2, m_gradientDirection);
////  			memDC.SetPen(*wxBLACK_PEN);
//
////  			memDC.SetBrush(*wxTRANSPARENT_BRUSH);
//
////  			memDC.DrawRectangle(rc);
//
////  
//
////  			memDC.SelectObject( wxNullBitmap );
////  
////  			SetBackgroundBitmap(bitmap);
////  		}		
////  	}
//// 
//// 	void OnPaint(wxPaintEvent& event)
//// 	{
//// 		wxRect rc=wxPanel::GetClientRect();
//// 
//// 		wxPaintDC memDC( this);
//
//// 		wxGCDC dc( memDC );
//
//// 
//
//// 		dc.SetBackground( *wxTRANSPARENT_BRUSH );
//
//// 		dc.Clear();
//
//// 
//
//// // 		dc.SetBrush( *wxRED_BRUSH );
//
//// // 		dc.SetPen( *wxTRANSPARENT_PEN );
//
//// // 		dc.DrawRectangle( 10, 10, 44, 44 		//////////////////////////////////////////////////////////////////////////
//
//// 		
////  		memDC.GradientFillLinear(rc, m_gradientColour1, m_gradientColour2, m_gradientDirection);
//
//// // 		memDC.SetPen(*wxBLACK_PEN);
//
//
//// // 		memDC.SetBrush(*wxTRANSPARENT_BRUSH);
//
//
//// // 		memDC.DrawRectangle(rc);
//
//// 		//dc.SetBrush(*wxTRANSPARENT_BRUSH);
//// 		//dc.SetPen(wxColour(200, 200, 200));
//// 		//dc.DrawRectangle(rc);
//// 
//// // 		dc.SetBrush(wxColour(232, 232, 232));
//
//// // 		dc.SetBrush(GetBackgroundColour());
//
//
//// // 		dc.SetPen(wxColour(70, 70, 70));
//
//
//// // 		dc.DrawRoundedRectangle(rc, 8);
//
//
//// 
//// 	}
//
//	
//};


class G3BitmapButtonComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3BitmapButton* bitmapButton=NULL;

		if ( obj->IsNull( _("bitmapChecked") ) )
		{
			bitmapButton = new G3BitmapButton((wxWindow*)parent,
				obj->GetPropertyAsString(_("label") ),
				obj->GetPropertyAsBitmap( _("bitmapNormal") ),		
				obj->GetPropertyAsBitmap( _("bitmapHover") ),
				-1,
				obj->GetPropertyAsPoint(_("pos")),
				obj->GetPropertyAsSize(_("size")),
				obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));			
		}
		else
		{
			bitmapButton = new G3BitmapButton((wxWindow*)parent,
				obj->GetPropertyAsString(_("label") ),
				obj->GetPropertyAsBitmap( _("bitmapNormal") ),		
				obj->GetPropertyAsBitmap( _("bitmapHover") ),
				obj->GetPropertyAsBitmap( _("bitmapChecked") ),
				-1,
				obj->GetPropertyAsPoint(_("pos")),
				obj->GetPropertyAsSize(_("size")),
				obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

			bitmapButton->SetValue(obj->GetPropertyAsInteger( _("checked") ) );			
		}		

		bitmapButton->SetForegroundColour( obj->GetPropertyAsColour( _("fg") ));

		return bitmapButton;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3BitmapButton"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		//xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3BitmapButton"));
		filter.AddWindowProperties();
		//filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

class G3BitmapPanelComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3BitmapPanel* panelBitmap=NULL;

		if ( !obj->IsNull( _("backgroundBitmap") ) )
		{
			panelBitmap = new G3BitmapPanel((wxWindow*)parent,
				obj->GetPropertyAsBitmap( _("backgroundBitmap") ),		
				-1,
				obj->GetPropertyAsPoint(_("pos")),
				obj->GetPropertyAsSize(_("size")),
				obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));
		}
		else
		{
			panelBitmap = new G3BitmapPanel((wxWindow*)parent,
				obj->GetPropertyAsColour( _("gradientColor1") ),
				obj->GetPropertyAsColour( _("gradientColor2") ),
				(wxDirection)obj->GetPropertyAsInteger(_("gradientDirection")),
				-1,
				obj->GetPropertyAsPoint(_("pos")),
				obj->GetPropertyAsSize(_("size")),
				obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));
		}

		return panelBitmap;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3BitmapPanel"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		//xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3BitmapPanel"));
		filter.AddWindowProperties();
		//filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

//////////////////////////////////////////////////////////////////////////

class G3ScrolledWindowBitmap:public wxCustomBackgroundWindow<wxScrolledWindow>
{
public:
	G3ScrolledWindowBitmap()
	{

	}

	wxColour m_gradientColour1, m_gradientColour2;
	wxDirection m_gradientDirection;

	G3ScrolledWindowBitmap(wxWindow *parent, wxBitmap *bitmap, wxWindowID id,
		const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, 
		long style=0, const wxString &name=wxPanelNameStr)//:
	//wxScrolledWindow(parent, id, pos, size, wxScrolledWindowStyle|style)	
	{
		Create(parent, id, pos, size, style|wxHSCROLL|wxVSCROLL, name);

		SetBackgroundBitmap(*bitmap);
	}	

	G3ScrolledWindowBitmap(wxWindow *parent, wxColour gradientColour1, wxColour gradientColour2, wxDirection gradientDir, wxWindowID id,
		const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, 
		long style=0, const wxString &name=wxPanelNameStr):
		//wxScrolledWindow(parent, id, pos, size, style|wxHSCROLL|wxVSCROLL, name),
		m_gradientColour1(gradientColour1),
		m_gradientColour2(gradientColour2),
		m_gradientDirection(gradientDir)
	
	{		
		Create(parent, id, pos, size, style|wxHSCROLL|wxVSCROLL, name);

		Connect( wxEVT_SIZE, wxSizeEventHandler( G3ScrolledWindowBitmap::OnSize), NULL, this );
	}

	~G3ScrolledWindowBitmap()
	{
		Disconnect( wxEVT_SIZE, wxSizeEventHandler( G3ScrolledWindowBitmap::OnSize), NULL, this );
	}

	void OnSize(wxSizeEvent& event)
	{
		//wxRect rc=wxPanel::GetClientRect();
		wxRect rc=GetVirtualSize();

		wxMemoryDC memDC;
		wxBitmap bitmap (rc.GetWidth(), rc.GetHeight());
		memDC.SelectObject(bitmap);


		memDC.GradientFillLinear(rc, m_gradientColour1, m_gradientColour2, m_gradientDirection);
		// 		memDC.SetPen(*wxBLACK_PEN);
		// 		memDC.SetBrush(*wxTRANSPARENT_BRUSH);
		// 		memDC.DrawRectangle(rc);
		memDC.SelectObject(wxNullBitmap);

		SetBackgroundBitmap(bitmap);
	}
};

class G3ScrolledWindowBitmapComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3ScrolledWindowBitmap* scrolledWindowBitmap=NULL;

		if ( !obj->IsNull( _("backgroundBitmap") ) )
		{
			scrolledWindowBitmap = new G3ScrolledWindowBitmap((wxWindow*)parent,
				&obj->GetPropertyAsBitmap( _("backgroundBitmap") ),		
				-1,
				obj->GetPropertyAsPoint(_("pos")),
				obj->GetPropertyAsSize(_("size")),
				obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));
		}
		else
		{
			scrolledWindowBitmap = new G3ScrolledWindowBitmap((wxWindow*)parent,
				obj->GetPropertyAsColour( _("gradientColor1") ),
				obj->GetPropertyAsColour( _("gradientColor2") ),
				(wxDirection)obj->GetPropertyAsInteger(_("gradientDirection")),
				-1,
				obj->GetPropertyAsPoint(_("pos")),
				obj->GetPropertyAsSize(_("size")),
				obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));
		}
		
		scrolledWindowBitmap->SetScrollRate(
			obj->GetPropertyAsInteger(_("scroll_rate_x")),
			obj->GetPropertyAsInteger(_("scroll_rate_y")));

		return scrolledWindowBitmap;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3ScrolledWindowBitmap"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		xrc.AddPropertyValue( _("scrollrate"), wxString::Format( wxT("%d,%d"),
			obj->GetPropertyAsInteger(_("scroll_rate_x")),
			obj->GetPropertyAsInteger(_("scroll_rate_y")) ) );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("G3ScrolledWindowBitmap"));
		filter.AddWindowProperties();

		ticpp::Element *scrollrate = xrcObj->FirstChildElement("scrollrate");
		if( scrollrate ) {
			wxString value( wxString( scrollrate->GetText().c_str(), wxConvUTF8 ) );
			filter.AddPropertyValue( _("scroll_rate_x"), value.BeforeFirst( wxT(',') ) );
			filter.AddPropertyValue( _("scroll_rate_y"), value.AfterFirst( wxT(',') ) );
		}
		return filter.GetXfbObject();
	}
};

//////////////////////////////////////////////////////////////////////////
class G3SoundChannelsComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		G3SoundChannels* soundChannels = new G3SoundChannels((wxWindow*)parent,-1,
			/*obj->GetPropertyAsString(_("label")),*/
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

		if ( !obj->IsNull( _("imageSize") ) )
		{
			soundChannels->SetImageSize( obj->GetPropertyAsSize( _("imageSize") ) );
		}

		if ( !obj->IsNull( _("itemSpace") ) )
		{
			soundChannels->SetItemSpace( obj->GetPropertyAsSize( _("itemSpace") ) );
		}

		if ( !obj->IsNull( _("labelFont") ) )
		{
			soundChannels->SetLabelFont( obj->GetPropertyAsFont( _("labelFont") ) );
		}

		if ( !obj->IsNull( _("labelColour") ) )
		{
			soundChannels->SetLabelColour( obj->GetPropertyAsColour( _("labelColour") ) );
		}

		if ( !obj->IsNull( _("selectedLabelColour") ) )
		{
			soundChannels->SetSelectedLabelColour( obj->GetPropertyAsColour( _("selectedLabelColour") ) );
		}

		if ( !obj->IsNull( _("bgColor1") ) )
		{
			soundChannels->SetBgGradientColour1( obj->GetPropertyAsColour( _("bgColor1") ) );
		}

		if ( !obj->IsNull( _("bgColor2") ) )
		{
			soundChannels->SetBgGradientColour2( obj->GetPropertyAsColour( _("bgColor2") ) );
		}

		if ( !obj->IsNull( _("labelBgColor1") ) )
		{
			soundChannels->SetLabelGradientColour1( obj->GetPropertyAsColour( _("labelBgColor1") ) );
		}

		if ( !obj->IsNull( _("labelBgColor2") ) )
		{
			soundChannels->SetLabelGradientColour2( obj->GetPropertyAsColour( _("labelBgColor2") ) );
		}

		if ( !obj->IsNull( _("selFrameColor") ) )
		{
			soundChannels->SetSelectedFrameColour( obj->GetPropertyAsColour( _("selFrameColor") ) );
		}

		if ( !obj->IsNull( _("selFrameWidth") ) )
		{
			soundChannels->SetSelectedFrameWidth( obj->GetPropertyAsInteger( _("selFrameWidth") ) );
		}

		if ( !obj->IsNull( _("selectedLabelBackgroundColor") ) )
		{
			soundChannels->SetSelectedLabelBgColour( obj->GetPropertyAsColour( _("selectedLabelBackgroundColor") ) );
		}

		if ( !obj->IsNull( _("viewMode") ) )
		{
			//soundChannels->SetViewMode( obj->GetPropertyAsInteger( _("viewMode") ) );
			int viewMode=obj->GetPropertyAsInteger( _("viewMode") );
			soundChannels->SetViewMode(viewMode);
		}

		soundChannels->ClearAll();

		wxBitmap bmp(Pixmap, wxBITMAP_TYPE_XPM);
		wxImage image=bmp.ConvertToImage();
		for (int i=0;i<10;i++)
		{		
			soundChannels->CreateChannel(wxString::Format("%channel: %i"),
				_T("Realtek Sound - pokój 3"), 
				_T("IDLE"), 
				_T("14:26 - 01-03-2014"),
				_T("4"));			
		}

		return soundChannels;
	}

	ticpp::Element* ExportToXrc(IObject* obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3SoundChannels"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		//xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc(ticpp::Element* xrcObj)
	{
		XrcToXfbFilter filter(xrcObj, _("G3SoundChannels"));
		filter.AddWindowProperties();
		//filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

//////////////////////////////////////////////////////////////////////////

int intArrays[]={0, 1, 2};

float fltArrays[]={0.2f, 2.0f, 55.0f};

std::string stringArrays[]={"test", "Test2", "Test3", "Level1.TexGroup<detail02.tga>"};

bool boolArrays[]={false, true, false};

class CGGData:public CG3PropertyBaseData
{
public:
	std::string m_text;

	CGGData(const std::string &text):
	CG3PropertyBaseData(),
		m_text(text)	
	{

	}

	~CGGData()
	{

	}

	void DoUpdate()
	{
		//wxString ss=wxString::Format("GGData: text");
		//wxASSERT_MSG(0, ss);
		//wxMessageBox("test");
		//OUTPUT
		//OutputDebugString(ss.c_str());
	}
};

class G3PropertyGridComponent : public ComponentBase, public wxEvtHandler
{
public:
	G3PropertyGrid* pg;

	void OnG3PropGridEvent(G3PropertyGridEvent &event)
	{
		if(event.GetEventType()==G3_EVT_PROPERTYGRID_PROPERTY_BUTTON)
		{
			wxMessageBox(wxString::Format("float arr[1]=%f", fltArrays[1]));
		}
	}

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		pg = new G3PropertyGrid((wxWindow *)parent,-1,			
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")),			
			obj->GetPropertyAsString(_("name")));

		if ( !obj->GetPropertyAsString(wxT("extra_style")).empty() )
		{
			pg->SetExtraStyle( obj->GetPropertyAsInteger( wxT("extra_style") ) );
		}

		pg->Connect( G3_EVT_PROPERTYGRID_PROPERTY_BUTTON, G3PropertyGridEventHandler( G3PropertyGridComponent::OnG3PropGridEvent), NULL, this );

		// G3 >
		wxPGProperty *g3Category=pg->AddCategory(_("G3 Property"));

		G3MultiFloatProperty *pMultFloatProperty=pg->AddFloatProperty(g3Category, _("MultiFloatProp"));

		pMultFloatProperty->BeginAddValues();
		pMultFloatProperty->AddValue(&fltArrays[0]);
		pMultFloatProperty->AddValue(&fltArrays[1]);
		pMultFloatProperty->AddValue(&fltArrays[2]);
		pMultFloatProperty->EndAddValues();

		G3MultiFloatProperty *pMultFloatProperty2=pg->AddFloatProperty(g3Category, _("SingleFloatProp2"));
		pMultFloatProperty2->BeginAddValues();
		pMultFloatProperty2->AddValue(&fltArrays[0]);
		pMultFloatProperty2->EndAddValues();

		G3MultiStringProperty  *pMultStringProperty1=pg->AddStringProperty(g3Category, _("MultiStringProperty"));
		pMultStringProperty1->BeginAddValues();
		pMultStringProperty1->AddValue(&stringArrays[0]);
		pMultStringProperty1->AddValue(&stringArrays[1]);
		pMultStringProperty1->AddValue(&stringArrays[2]);
		pMultStringProperty1->EndAddValues();

		G3MultiStringProperty *pMultStringProperty2=pg->AddStringProperty(g3Category, _("SingleStringProperty"));
		pMultStringProperty2->BeginAddValues();
		pMultStringProperty2->AddValue(&stringArrays[0]);
		pMultStringProperty2->EndAddValues();

		wxPGChoices choicesEnum;
		choicesEnum.Add(_("Linear"));
		choicesEnum.Add(_("Cosine"));
		choicesEnum.Add(_("Stepped"));

		G3MultiEnumProperty *pMultEnumProperty=pg->AddEnumProperty(g3Category, _("MultiEnumProperty"), choicesEnum, 1);
		pMultEnumProperty->BeginAddValues();
		pMultEnumProperty->AddValue(&intArrays[0]);
		pMultEnumProperty->AddValue(&intArrays[1]);
		pMultEnumProperty->AddValue(&intArrays[2]);
		pMultEnumProperty->EndAddValues();

		G3MultiEnumProperty *pMultEnumProperty2=pg->AddEnumProperty(g3Category, _("SingleEnumProperty"), choicesEnum, 2);
		pMultEnumProperty2->BeginAddValues();
		pMultEnumProperty2->AddValue(&intArrays[0]);
		pMultEnumProperty2->EndAddValues();

		G3MultiIntProperty *pMultIntProperty=pg->AddIntProperty(g3Category, _("MultiIntProperty"));
		pMultIntProperty->BeginAddValues();
		pMultIntProperty->AddValue(&intArrays[0]);
		pMultIntProperty->AddValue(&intArrays[1]);
		pMultIntProperty->EndAddValues();

		G3MultiIntProperty *pMultIntProperty2=pg->AddIntProperty(g3Category, _("SingleIntProperty"));
		pMultIntProperty2->BeginAddValues();
		pMultIntProperty2->AddValue(&intArrays[0]);
		pMultIntProperty2->EndAddValues();

		G3MultiFloatProperty *pMultFloatProperty3=pg->AddFloatProperty(g3Category, _("SingleFloatProperty - DATA"));
		pMultFloatProperty3->BeginAddValues();
		pMultFloatProperty3->AddValue(&fltArrays[0], new CGGData("teeeest from gg"));
		pMultFloatProperty3->EndAddValues();

		G3MultiBoolProperty *pMultBoolProperty=pg->AddBoolProperty(g3Category, _("SingleBoolProperty"));
		pMultBoolProperty->BeginAddValues();
		pMultBoolProperty->AddValue(&boolArrays[0]);
		pMultBoolProperty->EndAddValues();

		wxPGProperty *propPos=pg->AddComposed(_("Position"));
		//pg->DisableProperty(propPos);
		G3MultiFloatProperty *pMultFloatPropertyX=pg->AddFloatProperty(propPos, _("X"));
		pMultFloatPropertyX->SetMinRange(-13.0f);
		pMultFloatPropertyX->SetMaxRange(35.0f);
		pMultFloatPropertyX->BeginAddValues();	
		pMultFloatPropertyX->AddValue(&fltArrays[0]);
		pMultFloatPropertyX->AddValue(&fltArrays[1]);
		pMultFloatPropertyX->AddValue(&fltArrays[2]);
		pMultFloatPropertyX->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyY=pg->AddFloatProperty(propPos, _("Y"));
		pMultFloatPropertyY->SetMinRange(0.0f);
		pMultFloatPropertyY->SetMaxRange(12.0f);
		pMultFloatPropertyY->BeginAddValues();	
		pMultFloatPropertyY->AddValue(&fltArrays[1]);
		pMultFloatPropertyY->AddValue(&fltArrays[1]);
		pMultFloatPropertyY->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyZ=pg->AddFloatProperty(propPos, _("Z"));
		pMultFloatPropertyZ->BeginAddValues();	
		pMultFloatPropertyZ->AddValue(&fltArrays[2]);
		pMultFloatPropertyZ->EndAddValues();

		wxPGProperty *propRot=pg->AddComposed(_("Rotation"));
		G3MultiFloatProperty *pMultFloatPropertyH=pg->AddFloatProperty(propRot, _("H"));
		pMultFloatPropertyH->BeginAddValues();	
		pMultFloatPropertyH->AddValue(&fltArrays[0]);
		pMultFloatPropertyH->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyP=pg->AddFloatProperty(propRot, _("P"));
		pMultFloatPropertyP->BeginAddValues();	
		pMultFloatPropertyP->AddValue(&fltArrays[1]);
		pMultFloatPropertyP->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyB=pg->AddFloatProperty(propRot, _("B"));
		pMultFloatPropertyB->BeginAddValues();	
		pMultFloatPropertyB->AddValue(&fltArrays[2]);
		pMultFloatPropertyB->EndAddValues();

		//////////////////////////////////////////////////////////////////////////
		G3ContentDataProperty *propContent=pg->AddContentDataProperty(g3Category, _("contentDataProp"));
		propContent->BeginAddValues();	
		propContent->AddValue(&stringArrays[3]);
		propContent->EndAddValues();
		//pg->DisableProperty(propContent);

		G3MultiFrameProperty *pMultFrameProperty=pg->AddFrameProperty(g3Category, _("SingleFrame2TimeProperty"));
		pMultFrameProperty->BeginAddValues();		
		pMultFrameProperty->AddValue(&fltArrays[1]);
		pMultFrameProperty->EndAddValues();

		//pMultFrameProperty->SetValue((int) fltArrays[1]*30/);

		// < G3
		//////////////////////////////////////////////////////////////////////////
		
		pg->Append( new wxPropertyCategory( _("Sample Category") ) );

		// Add string property
		pg->Append( new wxStringProperty(wxT("Label"),wxT("Name"),wxT("Initial Value")) );

		// Add int property
		pg->Append( new wxIntProperty ( wxT("IntProperty"), wxPG_LABEL, 12345678 ) );

		// Add float property (value type is actually double)
		pg->Append( new wxFloatProperty ( wxT("FloatProperty"), wxPG_LABEL, 12345.678 ) );

		// Add a bool property
		pg->Append( new wxBoolProperty ( wxT("BoolProperty"), wxPG_LABEL, false ) );
		pg->Append( new wxBoolProperty ( wxT("BoolPropertyAsCheckbox"), wxPG_LABEL, true ) );
		pg->SetPropertyAttribute( wxT("BoolPropertyAsCheckbox"), wxPG_BOOL_USE_CHECKBOX, (long)1);

		// A string property that can be edited in a separate editor dialog.
		pg->Append( new wxLongStringProperty ( wxT("LongStringProperty"), wxPG_LABEL,
			wxString(_("This is much longer string than the ") ) +
			wxString(_("first one. Edit it by clicking the button.") ) ) );

		// String editor with dir selector button.
		pg->Append( new wxDirProperty( wxT("DirProperty"), wxPG_LABEL, ::wxGetUserHome()) );

		// A file selector property.
		pg->Append( new wxFileProperty( wxT("FileProperty"), wxPG_LABEL, wxEmptyString ) );

		pg->Append( new wxPropertyCategory( _("Sample Parent Property") ) );
		wxPGProperty *carProp = pg->Append( new wxStringProperty( _("Car"), wxPG_LABEL, wxT("<composed>") ) );
		pg->AppendIn( carProp, new wxStringProperty( _("Model"), wxPG_LABEL, wxT("Lamborghini Diablo SV") ) );
		pg->AppendIn( carProp, new wxIntProperty( _("Engine Size (cc)"), wxPG_LABEL, 5707 ) );

		wxPGProperty *speedsProp = pg->AppendIn( carProp, new wxStringProperty( _("Speeds"), wxPG_LABEL, wxT("<composed>") ) );
		pg->AppendIn( speedsProp, new wxIntProperty( _("Max. Speed (mph)"), wxPG_LABEL, 300 ) );
		pg->AppendIn( speedsProp, new wxFloatProperty( _("0-100 mph (sec)"), wxPG_LABEL, 3.9 ) );
		pg->AppendIn( speedsProp, new wxFloatProperty( _("1/4 mile (sec)"), wxPG_LABEL, 8.6 ) );
		pg->AppendIn( carProp, new wxIntProperty( _("Price ($)"), wxPG_LABEL, 300000) );

		if ( obj->GetPropertyAsInteger( wxT("include_advanced") ) )
		{
			pg->Append( new wxPropertyCategory( _("Advanced Properties") ) );
			// wxArrayStringProperty embeds a wxArrayString.
			pg->Append( new wxArrayStringProperty( _("Example of ArrayStringProperty"), wxT("ArrayStringProp") ) );

			// Image file property. Wildcard is auto-generated from available
			// image handlers, so it is not set this time.
			pg->Append( new wxImageFileProperty( _("Example of ImageFileProperty"), wxT("ImageFileProp") ) );

			// Font property has sub-properties.
			pg->Append( new wxFontProperty( _("Font"), wxPG_LABEL ) );

			// Colour property with arbitrary colour.
			pg->Append( new wxColourProperty( _("My Colour 1"), wxPG_LABEL, wxColour( 242, 109, 0 ) ) );

			// System colour property.
			pg->Append( new wxSystemColourProperty( _("My SysColour 1"), wxPG_LABEL, wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOW ) ) );

			// System colour property with custom colour.
			pg->Append( new wxSystemColourProperty( _("My SysColour 2"), wxPG_LABEL, wxColour( 0, 200, 160 ) ) );

			// Cursor property
			pg->Append( new wxCursorProperty( _("My Cursor"), wxPG_LABEL, wxCURSOR_ARROW ) );
		}

		return pg;
	}

	void Cleanup( wxObject* obj )
	{
		pg->Disconnect( G3_EVT_PROPERTYGRID_PROPERTY_BUTTON, G3PropertyGridEventHandler( G3PropertyGridComponent::OnG3PropGridEvent), NULL, this );

		ComponentBase::Cleanup( obj );
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3PropertyGrid"), obj->GetPropertyAsString(_("name")));

		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("G3PropertyGrid"));

		return filter.GetXfbObject();
	}
};

class G3PropertyGridExComponent : public ComponentBase, public wxEvtHandler
{
public:
	G3PropertyGridEx* pg;

	void OnG3PropGridEvent(G3PropertyGridEvent &event)
	{
		if(event.GetEventType()==G3_EVT_PROPERTYGRID_PROPERTY_BUTTON)
		{
			wxMessageBox(wxString::Format("float arr[1]=%f", fltArrays[1]));
		}
	}

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		pg = new G3PropertyGridEx((wxWindow *)parent,-1,			
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")),
			obj->GetPropertyAsString(_("name")));

 		if ( !obj->GetPropertyAsString(wxT("extra_style")).empty() )
 		{
 			pg->GetG3PropertyGrid()->SetExtraStyle( obj->GetPropertyAsInteger( wxT("extra_style") ) );
 		}

		pg->Connect( G3_EVT_PROPERTYGRID_PROPERTY_BUTTON, G3PropertyGridEventHandler( G3PropertyGridExComponent::OnG3PropGridEvent), NULL, this );

		// G3 >
		wxPGProperty *g3Category=pg->GetG3PropertyGrid()->AddCategory(_("G3 Property"));

		G3MultiFloatProperty *pMultFloatProperty=pg->GetG3PropertyGrid()->AddFloatProperty(g3Category, _("MultiFloatProp"));

		pMultFloatProperty->BeginAddValues();
		pMultFloatProperty->AddValue(&fltArrays[0]);
		pMultFloatProperty->AddValue(&fltArrays[1]);
		pMultFloatProperty->AddValue(&fltArrays[2]);
		pMultFloatProperty->EndAddValues();

		G3MultiFloatProperty *pMultFloatProperty2=pg->GetG3PropertyGrid()->AddFloatProperty(g3Category, _("SingleFloatProp2"));
		pMultFloatProperty2->BeginAddValues();
		pMultFloatProperty2->AddValue(&fltArrays[0]);
		pMultFloatProperty2->EndAddValues();

		G3MultiStringProperty  *pMultStringProperty1=pg->GetG3PropertyGrid()->AddStringProperty(g3Category, _("MultiStringProperty"));
		pMultStringProperty1->BeginAddValues();
		pMultStringProperty1->AddValue(&stringArrays[0]);
		pMultStringProperty1->AddValue(&stringArrays[1]);
		pMultStringProperty1->AddValue(&stringArrays[2]);
		pMultStringProperty1->EndAddValues();

		G3MultiStringProperty *pMultStringProperty2=pg->GetG3PropertyGrid()->AddStringProperty(g3Category, _("SingleStringProperty"));
		pMultStringProperty2->BeginAddValues();
		pMultStringProperty2->AddValue(&stringArrays[0]);
		pMultStringProperty2->EndAddValues();

		wxPGChoices choicesEnum;
		choicesEnum.Add(_("Linear"));
		choicesEnum.Add(_("Cosine"));
		choicesEnum.Add(_("Stepped"));

		G3MultiEnumProperty *pMultEnumProperty=pg->GetG3PropertyGrid()->AddEnumProperty(g3Category, _("MultiEnumProperty"), choicesEnum, 1);
		pMultEnumProperty->BeginAddValues();
		pMultEnumProperty->AddValue(&intArrays[0]);
		pMultEnumProperty->AddValue(&intArrays[1]);
		pMultEnumProperty->AddValue(&intArrays[2]);
		pMultEnumProperty->EndAddValues();

		G3MultiEnumProperty *pMultEnumProperty2=pg->GetG3PropertyGrid()->AddEnumProperty(g3Category, _("SingleEnumProperty"), choicesEnum, 2);
		pMultEnumProperty2->BeginAddValues();
		pMultEnumProperty2->AddValue(&intArrays[0]);
		pMultEnumProperty2->EndAddValues();

		G3MultiIntProperty *pMultIntProperty=pg->GetG3PropertyGrid()->AddIntProperty(g3Category, _("MultiIntProperty"));
		pMultIntProperty->BeginAddValues();
		pMultIntProperty->AddValue(&intArrays[0]);
		pMultIntProperty->AddValue(&intArrays[1]);
		pMultIntProperty->EndAddValues();

		G3MultiIntProperty *pMultIntProperty2=pg->GetG3PropertyGrid()->AddIntProperty(g3Category, _("SingleIntProperty"));
		pMultIntProperty2->BeginAddValues();
		pMultIntProperty2->AddValue(&intArrays[0]);
		pMultIntProperty2->EndAddValues();

		G3MultiFloatProperty *pMultFloatProperty3=pg->GetG3PropertyGrid()->AddFloatProperty(g3Category, _("SingleFloatProperty - DATA"));
		pMultFloatProperty3->BeginAddValues();
		pMultFloatProperty3->AddValue(&fltArrays[0], new CGGData("teeeest from gg"));
		pMultFloatProperty3->EndAddValues();

		G3MultiBoolProperty *pMultBoolProperty=pg->GetG3PropertyGrid()->AddBoolProperty(g3Category, _("SingleBoolProperty"));
		pMultBoolProperty->BeginAddValues();
		pMultBoolProperty->AddValue(&boolArrays[0]);
		pMultBoolProperty->EndAddValues();

		wxPGProperty *propPos=pg->GetG3PropertyGrid()->AddComposed(_("Position"));
		//pg->GetG3PropertyGrid()->DisableProperty(propPos);
		G3MultiFloatProperty *pMultFloatPropertyX=pg->GetG3PropertyGrid()->AddFloatProperty(propPos, _("X"));
		pMultFloatPropertyX->SetMinRange(-13.0f);
		pMultFloatPropertyX->SetMaxRange(35.0f);
		pMultFloatPropertyX->BeginAddValues();	
		pMultFloatPropertyX->AddValue(&fltArrays[0]);
		pMultFloatPropertyX->AddValue(&fltArrays[1]);
		pMultFloatPropertyX->AddValue(&fltArrays[2]);
		pMultFloatPropertyX->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyY=pg->GetG3PropertyGrid()->AddFloatProperty(propPos, _("Y"));
		pMultFloatPropertyY->SetMinRange(0.0f);
		pMultFloatPropertyY->SetMaxRange(12.0f);
		pMultFloatPropertyY->BeginAddValues();	
		pMultFloatPropertyY->AddValue(&fltArrays[1]);
		pMultFloatPropertyY->AddValue(&fltArrays[1]);
		pMultFloatPropertyY->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyZ=pg->GetG3PropertyGrid()->AddFloatProperty(propPos, _("Z"));
		pMultFloatPropertyZ->BeginAddValues();	
		pMultFloatPropertyZ->AddValue(&fltArrays[2]);
		pMultFloatPropertyZ->EndAddValues();

		wxPGProperty *propRot=pg->GetG3PropertyGrid()->AddComposed(_("Rotation"));
		G3MultiFloatProperty *pMultFloatPropertyH=pg->GetG3PropertyGrid()->AddFloatProperty(propRot, _("H"));
		pMultFloatPropertyH->BeginAddValues();	
		pMultFloatPropertyH->AddValue(&fltArrays[0]);
		pMultFloatPropertyH->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyP=pg->GetG3PropertyGrid()->AddFloatProperty(propRot, _("P"));
		pMultFloatPropertyP->BeginAddValues();	
		pMultFloatPropertyP->AddValue(&fltArrays[1]);
		pMultFloatPropertyP->EndAddValues();

		G3MultiFloatProperty *pMultFloatPropertyB=pg->GetG3PropertyGrid()->AddFloatProperty(propRot, _("B"));
		pMultFloatPropertyB->BeginAddValues();	
		pMultFloatPropertyB->AddValue(&fltArrays[2]);
		pMultFloatPropertyB->EndAddValues();

		//////////////////////////////////////////////////////////////////////////
		wxPGProperty *propContent=pg->GetG3PropertyGrid()->AddContentDataProperty(g3Category, _("contentDataProp"));
		//pg->DisableProperty(propContent);

		G3MultiFrameProperty *pMultFrameProperty=pg->GetG3PropertyGrid()->AddFrameProperty(g3Category, _("SingleFrame2TimeProperty"));
		pMultFrameProperty->BeginAddValues();		
		pMultFrameProperty->AddValue(&fltArrays[1]);
		pMultFrameProperty->EndAddValues();

		// < G3
		//////////////////////////////////////////////////////////////////////////

		pg->GetG3PropertyGrid()->Append( new wxPropertyCategory( _("Sample Category") ) );

		// Add string property
		pg->GetG3PropertyGrid()->Append( new wxStringProperty(wxT("Label"),wxT("Name"),wxT("Initial Value")) );

		// Add int property
		pg->GetG3PropertyGrid()->Append( new wxIntProperty ( wxT("IntProperty"), wxPG_LABEL, 12345678 ) );

		// Add float property (value type is actually double)
		pg->GetG3PropertyGrid()->Append( new wxFloatProperty ( wxT("FloatProperty"), wxPG_LABEL, 12345.678 ) );

		// Add a bool property
		pg->GetG3PropertyGrid()->Append( new wxBoolProperty ( wxT("BoolProperty"), wxPG_LABEL, false ) );
		pg->GetG3PropertyGrid()->Append( new wxBoolProperty ( wxT("BoolPropertyAsCheckbox"), wxPG_LABEL, true ) );
		pg->GetG3PropertyGrid()->SetPropertyAttribute( wxT("BoolPropertyAsCheckbox"), wxPG_BOOL_USE_CHECKBOX, (long)1);

		// A string property that can be edited in a separate editor dialog.
		pg->GetG3PropertyGrid()->Append( new wxLongStringProperty ( wxT("LongStringProperty"), wxPG_LABEL,
			wxString(_("This is much longer string than the ") ) +
			wxString(_("first one. Edit it by clicking the button.") ) ) );

		// String editor with dir selector button.
		pg->GetG3PropertyGrid()->Append( new wxDirProperty( wxT("DirProperty"), wxPG_LABEL, ::wxGetUserHome()) );

		// A file selector property.
		pg->GetG3PropertyGrid()->Append( new wxFileProperty( wxT("FileProperty"), wxPG_LABEL, wxEmptyString ) );

		pg->GetG3PropertyGrid()->Append( new wxPropertyCategory( _("Sample Parent Property") ) );
		wxPGProperty *carProp = pg->GetG3PropertyGrid()->Append( new wxStringProperty( _("Car"), wxPG_LABEL, wxT("<composed>") ) );
		pg->GetG3PropertyGrid()->AppendIn( carProp, new wxStringProperty( _("Model"), wxPG_LABEL, wxT("Lamborghini Diablo SV") ) );
		pg->GetG3PropertyGrid()->AppendIn( carProp, new wxIntProperty( _("Engine Size (cc)"), wxPG_LABEL, 5707 ) );

		wxPGProperty *speedsProp = pg->GetG3PropertyGrid()->AppendIn( carProp, new wxStringProperty( _("Speeds"), wxPG_LABEL, wxT("<composed>") ) );
		pg->GetG3PropertyGrid()->AppendIn( speedsProp, new wxIntProperty( _("Max. Speed (mph)"), wxPG_LABEL, 300 ) );
		pg->GetG3PropertyGrid()->AppendIn( speedsProp, new wxFloatProperty( _("0-100 mph (sec)"), wxPG_LABEL, 3.9 ) );
		pg->GetG3PropertyGrid()->AppendIn( speedsProp, new wxFloatProperty( _("1/4 mile (sec)"), wxPG_LABEL, 8.6 ) );
		pg->GetG3PropertyGrid()->AppendIn( carProp, new wxIntProperty( _("Price ($)"), wxPG_LABEL, 300000) );

		if ( obj->GetPropertyAsInteger( wxT("include_advanced") ) )
		{
			pg->GetG3PropertyGrid()->Append( new wxPropertyCategory( _("Advanced Properties") ) );
			// wxArrayStringProperty embeds a wxArrayString.
			pg->GetG3PropertyGrid()->Append( new wxArrayStringProperty( _("Example of ArrayStringProperty"), wxT("ArrayStringProp") ) );

			// Image file property. Wildcard is auto-generated from available
			// image handlers, so it is not set this time.
			pg->GetG3PropertyGrid()->Append( new wxImageFileProperty( _("Example of ImageFileProperty"), wxT("ImageFileProp") ) );

			// Font property has sub-properties.
			pg->GetG3PropertyGrid()->Append( new wxFontProperty( _("Font"), wxPG_LABEL ) );

			// Colour property with arbitrary colour.
			pg->GetG3PropertyGrid()->Append( new wxColourProperty( _("My Colour 1"), wxPG_LABEL, wxColour( 242, 109, 0 ) ) );

			// System colour property.
			pg->GetG3PropertyGrid()->Append( new wxSystemColourProperty( _("My SysColour 1"), wxPG_LABEL, wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOW ) ) );

			// System colour property with custom colour.
			pg->GetG3PropertyGrid()->Append( new wxSystemColourProperty( _("My SysColour 2"), wxPG_LABEL, wxColour( 0, 200, 160 ) ) );

			// Cursor property
			pg->GetG3PropertyGrid()->Append( new wxCursorProperty( _("My Cursor"), wxPG_LABEL, wxCURSOR_ARROW ) );
		}

		return pg;
	}

	void Cleanup( wxObject* obj )
	{
		pg->Disconnect( G3_EVT_PROPERTYGRID_PROPERTY_BUTTON, G3PropertyGridEventHandler( G3PropertyGridExComponent::OnG3PropGridEvent), NULL, this );

		ComponentBase::Cleanup( obj );
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3PropertyGridEx"), obj->GetPropertyAsString(_("name")));

		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("G3PropertyGridEx"));

		return filter.GetXfbObject();
	}
};
//////////////////////////////////////////////////////////////////////////

#include <wx/bannerwindow.h>

class wxBannerWindowComponent : public ComponentBase, public wxEvtHandler
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{		
		wxBannerWindow *m_bannerWnd= new wxBannerWindow((wxWindow *)parent, 
			wxID_ANY, 
			(wxDirection)obj->GetPropertyAsInteger(_("direction")), 
			wxDefaultPosition, 
			wxDefaultSize, 
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

		if ( !obj->IsNull( _("gradientColor1") )  && !obj->IsNull( _("gradientColor2") ) )
		{
			m_bannerWnd->SetGradient(obj->GetPropertyAsColour( _("gradientColor1")) , obj->GetPropertyAsColour( _("gradientColor2") ));
		}

		if ( !obj->IsNull( _("backgroundBitmap") ) )
		{
			m_bannerWnd->SetBitmap( obj->GetPropertyAsBitmap( _("backgroundBitmap") ) );
		}

		if ( !obj->IsNull( _("titleText") ) &&  !obj->IsNull( _("messageText") ))
		{
			m_bannerWnd->SetText(obj->GetPropertyAsString(_("titleText")), obj->GetPropertyAsString(_("messageText")));
		}		

		return m_bannerWnd;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("wxBannerWindow"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();

		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("wxBannerWindow"));
		filter.AddWindowProperties();


		return filter.GetXfbObject();
	}
};

//////////////////////////////////////////////////////////////////////////
class wxBitmapToggleButtonComponent : public ComponentBase, public wxEvtHandler
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxBitmapToggleButton * button = new wxBitmapToggleButton ((wxWindow*)parent,-1,
			obj->GetPropertyAsBitmap(_("bitmap")),
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));


// 		if ( obj->GetPropertyAsInteger( _("default") ) != 0 )
// 		{
// 			button->SetDefault();
// 		}

		if ( !obj->IsNull( _("disabled") ) )
		{
			button->SetBitmapDisabled( obj->GetPropertyAsBitmap( _("disabled") ) );
		}

		if ( !obj->IsNull( _("selected") ) )
		{
			button->SetBitmapSelected( obj->GetPropertyAsBitmap( _("selected") ) );
		}

		if ( !obj->IsNull( _("focus") ) )
		{
			button->SetBitmapFocus( obj->GetPropertyAsBitmap( _("focus") ) );
		}

		if ( !obj->IsNull( _("hover") ) )
		{
			button->SetBitmapHover( obj->GetPropertyAsBitmap( _("hover") ) );
		}

		button->SetValue( ( obj->GetPropertyAsInteger(_("value")) != 0 ) );
		button->Connect( wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler( wxBitmapToggleButtonComponent::OnToggle ), NULL, this );

		return button;
	}

	void OnToggle( wxCommandEvent& event )
	{
		wxBitmapToggleButton * window = dynamic_cast< wxBitmapToggleButton * >( event.GetEventObject() );
		if ( 0 != window )
		{
			wxString value;
			value.Printf( wxT("%i"), window->GetValue() ? 1 : 0 );
			GetManager()->ModifyProperty( window, _("value"), value );
			window->SetFocus();
		}
	}

	void Cleanup( wxObject* obj )
	{
		wxToggleButton* window = dynamic_cast< wxToggleButton* >( obj );
		if ( 0 != window )
		{
			window->Disconnect( wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler( wxBitmapToggleButtonComponent::OnToggle ), NULL, this );
		}
		ComponentBase::Cleanup( obj );
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("wxToggleButton"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(_("label"),_("label"), XRC_TYPE_TEXT);
		xrc.AddProperty(_("value"),_("checked"), XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("wxToggleButton"));
		filter.AddWindowProperties();
		filter.AddProperty(_("label"),_("label"), XRC_TYPE_TEXT);
		filter.AddProperty(_("checked"),_("value"), XRC_TYPE_BOOL);
		return filter.GetXfbObject();
	}

};


//////////////////////////////////////////////////////////////////////////
#include <wx/webview.h>
#include <wx/msw/webview_ie.h>

class wxWebViewComponent : public ComponentBase, public wxEvtHandler
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxWebView::RegisterFactory(wxWebViewBackendIE, wxSharedPtr<wxWebViewFactory> (new wxWebViewFactoryIE));

		wxWebView *m_pWebView= wxWebView::New((wxWindow*)parent, -1, obj->IsNull( _("url"))?"":obj->GetPropertyAsString( _("url")), wxDefaultPosition, wxDefaultSize, wxWebViewBackendDefault, obj->GetPropertyAsInteger(_("window_style")));
		m_pWebView->SetEditable( obj->GetPropertyAsInteger( _("isEditable")) );
		m_pWebView->EnableContextMenu(obj->GetPropertyAsInteger( _("isEnableContextMenu")) );
	
		return m_pWebView;
	}


	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("wxWebView"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("wxWebView"));
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}

};
//////////////////////////////////////////////////////////////////////////
class ComponentEvtHandler2 : public wxEvtHandler
{
private:
	wxWindow* m_window;
	IManager* m_manager;

public:
	ComponentEvtHandler2( wxWindow* win, IManager* manager )
		:
	m_window( win ),
		m_manager( manager )
	{
	}

protected:
	
	//void OnChoicebookPageChanged( wxChoicebookEvent& event );

	template < class T >
	void OnBookPageChanged( int selPage, wxEvent* event )
	{
		// Only handle events from this book - prevents problems with nested books, because OnSelected is fired on an
		// object and all of its parents
		if ( m_window != event->GetEventObject() )
		{
			return;
		}

		if ( selPage < 0 )
		{
			return;
		}

// 		size_t count = m_manager->GetChildCount( m_window );
// 		for ( size_t i = 0; i < count; i++ )
// 		{
// 			wxObject* wxChild = m_manager->GetChild( m_window, i );
// 			IObject*  iChild = m_manager->GetIObject( wxChild );
// 			if ( iChild )
// 			{
// 				if ( (int)i == selPage && !iChild->GetPropertyAsInteger( _("select") ) )
// 				{
// 					m_manager->ModifyProperty( wxChild, _("select"), wxT("1"), false );
// 				}
// 				else if ( (int)i != selPage && iChild->GetPropertyAsInteger( _("select") ) )
// 				{
// 					m_manager->ModifyProperty( wxChild, _("select"), wxT("0"), false );
// 				}
// 			}
// 		}
// 
// 		// Select the corresponding panel in the object tree
// 		T* book = wxDynamicCast( m_window, T );
// 		if ( NULL != book )
// 		{
// 			m_manager->SelectObject( book->GetPage( selPage ) );
// 		}
	}
	
	//DECLARE_EVENT_TABLE()
};

// void ComponentEvtHandler2::OnChoicebookPageChanged( wxChoicebookEvent& event )
// {
// 	//OnBookPageChanged< wxChoicebook >( event.GetSelection(), &event );
// 	//event.Skip();
// }

// BEGIN_EVENT_TABLE( ComponentEvtHandler, wxEvtHandler )
// 	EVT_CHOICEBOOK_PAGE_CHANGED( -1, ComponentEvtHandler::OnChoicebookPageChanged )
// 	END_EVENT_TABLE()


class G3RollMenuComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject* parent)
	{
		G3RollMenu *rollMenu=new G3RollMenu((wxWindow *)parent,
			-1,
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

		rollMenu->BuildFromDate(obj->GetPropertyAsString(_("menuData")));

		rollMenu->SetBackgroundColour(obj->GetPropertyAsColour( _("backgroundColor")));

		rollMenu->SetLabelItemColour(obj->GetPropertyAsColour( _("labelItemColour")));

		rollMenu->SetLabelSelectedItemColour(obj->GetPropertyAsColour( _("labelSelectedItemColour")));

		rollMenu->SetLabelSelectedItemBackgroundColour(obj->GetPropertyAsColour( _("selectedItemBackgroundColor")));

		//rollMenu->PushEventHandler( new ComponentEvtHandler2( rollMenu, GetManager() ) );

		return rollMenu;
	}

 	void OnCreated( wxObject* wxobject, wxWindow* wxparent )
	{
// 		G3RollMenu *rollMenu=wxDynamicCast( wxobject, G3RollMenu );
// 		if ( NULL == rollMenu )
// 		{
// 			wxLogError( _("This should be a G3RollMenu") );
// 			return;
// 		}
// 
// 		size_t childCount = GetManager()->GetChildCount( wxobject );
//   		for (int i=0;i<childCount;i++)
//   		{ 
// 			wxObject* paneChild = GetManager()->GetChild( wxobject, i );
// 
// 			// nasz wlasciwy panel(G3RollPanel dodany do G3RollMenu
// 			wxPanel* subwindow = wxDynamicCast( GetManager()->GetChild( paneChild, 0 ), wxPanel );
// 
// 			//wxMessageBox(GetManager()->GetIObject(paneChild)->GetClassName());
// 			if(GetManager()->GetIObject(paneChild)->GetClassName()==_("g3collpage"))
// 				rollMenu->AddPanel(subwindow, GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("label")));
// 
// 
// 			wxString ss=wxEmptyString;
// 			if(GetManager()->GetIObject(paneChild)->GetChildCount()>0)
// 			{
// 				for (int j=0;j<GetManager()->GetIObject(paneChild)->GetChildCount();j++)
// 				{
// 					IObject *child=GetManager()->GetIObject(paneChild)->GetChildPtr(j);
// 					
// 
// 					ss+=child->GetPropertyAsString( _("label"));
// 					
// 				}				
// 			}
// // 			if(ss.Len()>0)
// // 				wxMessageBox(ss);
// 			
// 			if(GetManager()->GetIObject(paneChild)->GetClassName()==_("G3RollMenuGroup"))
// 			{
// 				rollMenu->AddGroup(new G3RollMenuGroup(GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("name")),
// 				GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("label")),
// 				GetManager()->GetIObject(paneChild)->GetPropertyAsInteger( _("closed") ) ));
// 			}
// 
// 			if(GetManager()->GetIObject(paneChild)->GetClassName()==_("G3RollMenuButton"))
// 			{
// 				rollMenu->AddButton(new G3RollMenuButton(GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("name")),
// 					GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("label")),
// 					GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("id")), 
// 					0));
// 			}
// 	 	}
	}
};


class G3RollMenuGroupComponent : public ComponentBase
{
public:
	G3RollMenu *rollMenu;

	wxObject* Create(IObject *obj, wxObject* parent)
	{
		rollMenu=(G3RollMenu*) parent;
		

		
		//ver1
// 		wxPanel *panel=new wxPanel((wxWindow *)parent);
// 
// 		panel->SetLabel("groupFromComponentCreate");
// 		return panel;

		//ver2
		return ComponentBase::Create(obj, parent);
	}


 	void OnCreated( wxObject* wxobject, wxWindow* wxparent )
 	{		
		////G3RollMenu *rollMenu=wxDynamicCast( wxobject, G3RollMenu );
		//if ( NULL == rollMenu )
		//{
		//	wxLogError( _("This should be a G3RollMenu") );
		//	return;
		//}
		//	
		//size_t childCount = GetManager()->GetChildCount( wxobject );
		//for (int i=0;i<childCount;i++)
		//{ 
		//	wxObject* paneChild = GetManager()->GetChild( wxobject, i );

		//	// nasz wlasciwy panel(G3RollPanel dodany do G3RollMenu
		//	wxPanel* subwindow = wxDynamicCast( GetManager()->GetChild( paneChild, 0 ), wxPanel );
		//	//wxMessageBox(subwindow->GetName());

		//	rollMenu->AddPanel(subwindow, GetManager()->GetIObject(paneChild)->GetPropertyAsString( _("label")));		
		//}
 	}

	void OnSelected( wxObject* wxobject )
	{
		wxPanel* subwindow = wxDynamicCast( wxobject, wxPanel );
		if(subwindow)
			wxMessageBox(subwindow->GetName());


		//rollMenu->SelectItem();

		//BookUtils::OnSelected< wxNotebook >( wxobject, GetManager() );
		//wxMessageBox(wxT("onselect page"));
// 		size_t childCount = GetManager()->GetChildCount( wxobject );
// 		for (int i=0;i<childCount;i++)

// 		{ 

// 			wxObject* paneChild = GetManager()->GetChild( wxobject, i );

// 

// 			// nasz wlasciwy panel(G3RollPanel dodany do G3RollMenu

// 			wxPanel* subwindow = wxDynamicCast( GetManager()->GetChild( paneChild, 0 ), wxPanel );

// 			subwindow->SetBackgroundColour(*wxRED);

// 			

// 			//wxMessageBox(subwindow->GetName());

// 	

// 		}
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("G3RollMenuGroup"));
		xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		xrc.AddProperty(_("select"),_("selected"),XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("G3RollMenuGroup"));
		filter.AddWindowProperties();
		filter.AddProperty(_("selected"),_("select"),XRC_TYPE_BOOL);
		filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

class G3RollMenuPanelComponent : public ComponentBase
{
public:
	
	G3RollMenu *rollMenu;
	G3RollMenuGroup *rollMenuGroup;
	wxObject* Create(IObject *obj, wxObject* parent)
	{
 		wxWindow *par=(wxWindow *)parent;
// 		wxMessageBox(par->GetName());
// 		rollMenu=(G3RollMenu*) parent;
// 
// 		if(!rollMenu)
// 		{
// 			rollMenuGroup=(G3RollMenu*) parent;
// 		}

		wxPanel *panel=new wxPanel((wxWindow *)parent);
		panel->SetLabel(obj->GetPropertyAsString(_("name")));
		panel->SetBackgroundColour(*wxRED);
		par->Layout();
		return panel;
	}

	void OnCreated( wxObject* wxobject, wxWindow* wxparent )
	{
		ComponentBase::OnCreated(wxobject, wxparent);

//		// Easy read-only property access
//		IObject* obj = GetManager()->GetIObject( wxobject );
//
//		G3RollMenu* rollMenu = wxDynamicCast( wxparent, G3RollMenu );
//
//		//This wouldn't compile in MinGW - strange
//		///wxWindow* page = wxDynamicCast( manager->GetChild( wxobject, 0 ), wxWindow );
//
//		// Do this instead
//		wxObject* child = GetManager()->GetChild( wxobject, 0 );
//		wxWindow* page = NULL;
//		if ( child->IsKindOf(CLASSINFO(wxWindow)))
//		{
//			page = (wxWindow*)child;
//		}
//
//		// Error checking
//		if ( !( obj && rollMenu && page ) )
//		{
//			//wxLogError( _("%s is missing its wxFormBuilder object(%i), its parent(%i), or its child(%i)"), name.c_str(), obj, rollMenu, page );
//			return;
//		}
//
//		rollMenu->AddGroup(new G3RollMenuGroup(_T("testGroup"), _T("testGroup"), false));
//		
//
//		// Prevent event handling by wxFB - these aren't user generated events
//		//SuppressEventHandlers suppress( rollMenu );
//
//		// Save selection
//// 		int selection = book->GetSelection();
//// 		book->AddPage( page, obj->GetPropertyAsString( _("label") ) );
//// 
//// 		// Apply image to page
//// 		IObject* parentObj = GetManager()->GetIObject( wxparent );
//// 		if ( !parentObj )
//// 		{
//// 			wxLogError( _("%s's parent is missing its wxFormBuilder object"), name.c_str() );
//// 			return;
//// 		}
//// 		
//// 		if ( obj->GetPropertyAsString( _("select") ) == wxT("0") && selection >= 0 )
//// 		{
//// 			book->SetSelection(selection);
//// 		}
//// 		else
//// 		{
//// 			book->SetSelection( book->GetPageCount() - 1 );
//// 		}
	}
	


	void OnSelected( wxObject* wxobject )
	{	
		// Get actual page - first child
		wxObject* page = GetManager()->GetChild( wxobject, 0 );
		if ( NULL == page )
		{
			return;
		}


		// nasz wlasciwy panel(G3RollPanel dodany do G3RollMenu

		
// 		wxPanel *panel=(wxPanel*) page;
// 		if(panel)
// 		{
// 			if(rollMenu)
// 			{
// 				rollmenu->SelectItem(panel->GetName());
// 			}
// 			else
// 			{
// 				if(rollMenuGroup)
// 					rollMenuGroup->GetParent()->SelectItem(panel->GetName());
// 			}
// 		}

		G3RollMenu* rollmenu= wxDynamicCast( GetManager()->GetParent( wxobject ), G3RollMenu );
		if ( rollmenu )
		{
			for ( size_t i = 0; i < rollmenu->GetNumItems(); ++i )
			{

// 				if ( book->GetPage( i ) == page )
// 				{
// 					// Prevent infinite event loop
// 					SuppressEventHandlers suppress( book );
// 
// 					// Select Page
// 					book->SetSelection( i );
// 				}
			}
		}

		//BookUtils::OnSelected< wxNotebook >( wxobject, GetManager() );
		//wxMessageBox(wxT("onselect panel"));
	}

// 	ticpp::Element* ExportToXrc(IObject *obj)
// 	{
// 		ObjectToXrcFilter xrc(obj, _("wxMenu"), obj->GetPropertyAsString(_("name")));
// 		xrc.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
// 		return xrc.GetXrcObject();
// 	}
// 
// 	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
// 	{
// 		XrcToXfbFilter filter(xrcObj, _("submenu"));
// 		filter.AddProperty(_("label"),_("label"),XRC_TYPE_TEXT);
// 		return filter.GetXfbObject();
// 	}
};

class G3RollMenuButtonComponent : public ComponentBase
{
public:
// 	wxObject* Create(IObject *obj, wxObject* parent)
// 	{
// 		wxPanel *panel=new wxPanel((wxWindow *)parent);
// 		panel->SetLabel("buttonFromComponentCreate");
// 		panel->SetBackgroundColour(*wxYELLOW);
// 		return panel;
// 	}

// 	ticpp::Element* ExportToXrc(IObject *obj)
// 	{
// 		ObjectToXrcFilter xrc(obj, _("wxMenuItem"), obj->GetPropertyAsString(_("name")));
// 		wxString shortcut = obj->GetPropertyAsString(_("shortcut"));
// 		wxString label;
// 		if (shortcut.IsEmpty())
// 			label = obj->GetPropertyAsString(_("label"));
// 		else
// 			label = obj->GetPropertyAsString(_("label")) + wxT("\t") + shortcut;
// 
// 		xrc.AddPropertyValue(_("label"), label, true);
// 		xrc.AddProperty(_("help"),_("help"),XRC_TYPE_TEXT);
// 
// 		if (!obj->IsNull(_("bitmap")))
// 			xrc.AddProperty(_("bitmap"),_("bitmap"),XRC_TYPE_BITMAP);
// 
// 		int kind = obj->GetPropertyAsInteger(_("kind"));
// 
// 		if (obj->GetPropertyAsInteger(_("checked")) && (kind == wxITEM_RADIO || kind == wxITEM_CHECK))
// 			xrc.AddProperty(_("checked"), _("checked"), XRC_TYPE_BOOL);
// 
// 		if (obj->GetPropertyAsInteger(_("enabled")) == 0)
// 			xrc.AddProperty(_("enabled"), _("enabled"), XRC_TYPE_BOOL);
// 
// 		switch (kind)
// 		{
// 		case wxITEM_CHECK: xrc.AddPropertyValue(_("checkable"), _("1")); break;
// 		case wxITEM_RADIO: xrc.AddPropertyValue(_("radio"), _("1")); break;
// 		}
// 
// 		return xrc.GetXrcObject();
// 	}
// 
// 	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
// 	{
// 		XrcToXfbFilter filter(xrcObj, _("wxMenuItem"));
// 
// 		try
// 		{
// 			ticpp::Element *labelElement = xrcObj->FirstChildElement("label");
// 			wxString label( labelElement->GetText().c_str(), wxConvUTF8 );
// 
// 			wxString shortcut;
// 			int pos = label.Find( wxT("\\t") );
// 			if ( pos >= 0 )
// 			{
// 				shortcut = label.Mid( pos + 2 );
// 				label = label.Left( pos );
// 			}
// 
// 			filter.AddPropertyValue( _("label"), label, true );
// 			filter.AddPropertyValue( _("shortcut"), shortcut );
// 		}
// 		catch( ticpp::Exception& )
// 		{
// 		}
// 
// 		filter.AddProperty(_("help"),_("help"),XRC_TYPE_TEXT);
// 		filter.AddProperty(_("bitmap"),_("bitmap"),XRC_TYPE_BITMAP);
// 		return filter.GetXfbObject();
// 	}
};

//////////////////////////////////////////////////////////////////////////
BEGIN_LIBRARY()
    WINDOW_COMPONENT("G3ImageBrowser", G3ImageBrowserComponent)

	WINDOW_COMPONENT("G3ColorPickerPanel", G3ColorPickerPanelComponent)

	WINDOW_COMPONENT("G3ColorPickerDialog", G3ColorPickerDialogComponent)

	WINDOW_COMPONENT("G3CollapsiblePanels", G3CollapsiblePanelsComponent)
	ABSTRACT_COMPONENT("g3collpage", G3CollapsiblePageComponent)

	WINDOW_COMPONENT("G3PropertyGrid", G3PropertyGridComponent)
	WINDOW_COMPONENT("G3PropertyGridEx", G3PropertyGridExComponent)

	WINDOW_COMPONENT("G3RollMenu", G3RollMenuComponent)
	ABSTRACT_COMPONENT("G3RollMenuGroup", G3RollMenuGroupComponent)
	WINDOW_COMPONENT("G3RollMenuPanel", G3RollMenuPanelComponent)
	ABSTRACT_COMPONENT("G3RollMenuButton", G3RollMenuButtonComponent)
	
	WINDOW_COMPONENT("G3BitmapPanel", G3BitmapPanelComponent)
	WINDOW_COMPONENT("G3GroupBox", G3GroupBoxComponent)
	WINDOW_COMPONENT("G3CustomFileSelect", G3CustomFileSelectComponent)
	
	WINDOW_COMPONENT("G3BitmapButton", G3BitmapButtonComponent)
	
	WINDOW_COMPONENT("G3ScrolledWindowBitmap", G3ScrolledWindowBitmapComponent)
	
	WINDOW_COMPONENT("G3SoundChannels", G3SoundChannelsComponent)

	/// wx standardowe
	
	WINDOW_COMPONENT("wxBannerWindow", wxBannerWindowComponent)
	
	WINDOW_COMPONENT("wxBitmapToggleButton", wxBitmapToggleButtonComponent)

	WINDOW_COMPONENT("wxWebView", wxWebViewComponent)
	
	///

	// g3 imagebrowser
    MACRO(G3_IB_GRADIENTBACKGROUND)
	MACRO(G3_IB_FILLED_BACKGROUND_LABEL)
	MACRO(G3_IB_GRADIENT_BG_LABEL)
	MACRO(G3_IB_SELECTED_RENDER_IN_FRAME)
	
	MACRO(G3_IBVM_VIEWTHUMBNAILS)
	MACRO(G3_IBVM_VIEWDETAILS)
	MACRO(G3_IBVM_VIEWLIST)
	MACRO(G3_IBVM_VIEWSINLELIST)

	// g3 color picker
	MACRO(G3_CPD_USE_ALPHA)

	MACRO(G3_CP_DEFAULT)
	MACRO(G3_CP_SIMPLE_BACKGROUND)	
	MACRO(G3_CP_GRADIENTBACKGROUND)	

	//wxbannerwindow
	MACRO(wxLEFT)
	MACRO(wxRIGHT)
	MACRO(wxTOP)
	MACRO(wxBOTTOM)

END_LIBRARY()